Maquetado responsive con CSS Grid | Diseño adaptativo (excelente base)

https://www.youtube.com/watch?v=T4t00Hd3qZc

min 7.17 (actual)

elemntos para el menu de opciones

	+ guardar contraseña para que no sea necesario utilizarla cada vez que se 	encripta/desencripta

	+encryptacion en vivo "sin precionar el boton"

	+Darkmode

	+exportar como [txt] otros?

-----------------------------------/////////----------------------------

si hay un nombre errado [class, id] CSS no ejecuta lo que esta debajo (pero tampoco te avisa) lo mismo sucede con comandos errados (por verificar)


Now you need to link the styles.css file so the styles will be applied again. Nest a self-closing link element in the head element. Give it a rel attribute value stylesheet and an href attribute value of styles.css.

Note: Link element is self-closing

Note: porperties operator is ":" instead of "=" thats for setting up the value
[DO NOT USE ":" in the declaration]

ie:     input, textarea, select {
	width:100%;
	margin: 10px 0 0 0;  
}
	

|---------------------DIV element for design layout purposes----------------------|


<div></div> [in the html file]
The div element is used mainly for design layout purposes unlike the other content elements you have used so far. Add a div element inside the body element and then move all the other elements inside the new div.

to make the div not take up the entire width of the page. The CSS width property is perfect for this. Create a new type selector in the style sheet that gives your div element a width of 300px [it also takes % values]


-------------------------------------////////-----------------

|------------------------------A function---------------------|

A function is a piece of code that can take an input and perform a specific action. The CSS rgb function accepts values, or arguments, for red, green, and blue, and produces a color:

rgb(red, green, blue);
Each red, green, and blue value is a number from 0 to 255. 0 means that there's 0% of that color, and is black. 255 means that there's 100% of that color.

In the .one CSS rule, replace the color keyword red with the rgb function. For the rgb function, set the value for red to 255, the value for green to 0, and the value for blue to 0.


-------NOTE----- -------------------------------------------------
please note diferencess between: 				 -
selectors Properties [general] 					 -	
Classes [created] 						 -
Id's [created]							 -
								 -
more about this: https://www.w3schools.com/css/css_selectors.asp -
------------------------------------------------------------------


--------------------------///////----------------------------


Next, you want to center the div horizontally. You can do this by setting its margin-left and margin-right properties to auto. Think of the margin as invisible space around an element. Using these two margin properties, center the div element within the body element.


So far you have been using type selectors to style elements. A class selector is defined by a name with a dot directly in front of it, like this:

	.class-name {
		  	styles
		    }



inside the body type selector. Now add a background-image property and set its value to url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg).

			NOTE: url for bkgimage

	body {
  
 	 background-color: burlywood;
 	 background-image: url(https://cdn.freecodecamp.org/curriculum/css-		 cafe/beans.jpg)
  
		}


The border-left shorthand property lets you to set the left border's width, style, and color at the same time.

if no color, black is selected by default ****
check border style diferent values ****


Here is the syntax:

border-left: width style color;
In the .sleeve CSS rule, replace the border-left-width, border-left-style, and border-left-color properties with the border-left shorthand property. The values for the width, style, and color of the left border should be the same.


.sleeve {
  width: 110px;
  height: 25px;
  background-color: rgba(255, 255, 255, 0.5);
  border-left-width: 10px;
  border-left-style: solid;
  border-left-color: black;
}

with the shorthand:

.sleeve {
  width: 110px;
  height: 25px;
  background-color: rgba(255, 255, 255, 0.5);
  border-left: 10px solid black;  


Step 88
Notice that the edges of the shadow are sharp. This is because there is an optional blurRadius value for the box-shadow property:

defaults to 0 if it isn't included. (all right to left) 

box-shadow: offsetX offsetY blurRadius spreadRadius color;
box-shadow: offsetX offsetY blurRadius color;
box-shadow: offsetX offsetY color;
box-shadow: color;


------------------------------fomr

------------------------ Margin Auto-----[centering elements]-----------------

Your marker would look better if it was centered on the page. An easy way to do that is with the margin shorthand property.

In the last project, you set the margin area of elements separately with properties like margin-top and margin-left. The margin shorthand property makes it easy to set multiple margin areas at the same time.

To center your marker on the page, set its margin property to auto. This sets margin-top, margin-right, margin-bottom, and margin-left all to auto.

While you have three separate marker div elements, they look like one big rectangle. You should add some space between them to make it easier to see each element.

When the shorthand margin property has two values, it sets margin-top and margin-bottom to the first value, and margin-left and margin-right to the second value.

In your .marker CSS rule, set the margin property to 10px [top&bottom] auto [left-right].

---------------
display: inline-flex; reubica el elemento para que se adapte a los cambios de tamaño del contenedor [y lo alinea horizontalmente (uno al lado del otro)

[esta expresion centra al elemento verticalmente, pero centra la parte "superior" el limite superior del elemento

-------------------------------------

The rem unit stands for root em, and is relative to the font size of the html element.

As label elements are inline by default, they are all displayed side by side on the same line, making their text hard to read. To make them appear on separate lines, add display: block to the label element, and add a margin of 0.5rem 0, to separate them from each other.


Step 44

Center the form element, by giving it a margin of 0 auto. Then, fix its size to a maximum width of 500px, and a minimum width of 300px. In between that range, allow it to have a width of 60vw.


form{
margin:0 auto;
max-width:500px;
width:60vw;
min-width:300px;
}

Step 47
The border of the last fieldset element looks a little out of place. You can select the last element of a specific type using the last-of-type CSS pseudo-class, like this:

p:last-of-type { }
That will select the last p element. Create a new selector that targets the last fieldset element and set its border-bottom to none.


fieldset:last-of-type{
  border-bottom:none;
}


Step 48
It would be nicer to have the label text appear above the form elements.

Select all input, textarea, and select elements, and make them take up the full width of their parent elements.

Also, add 10px of margin to the top of the selected elements. Set the other margins to 0.



Step 48
It would be nicer to have the label text appear above the form elements.

Select all input, textarea, and select elements, and make them take up the full width of their parent elements.

Also, add 10px of margin to the top of the selected elements. Set the other margins to 0.


	input, textarea, select {
				width:100%;
				margin: 10px 0 0 0;  
				}


======================================>>>>>>>>>>> Jump to HTML ========>>>>>>>>>>>>>
======================================>>>>>>>>>>> Jump to HTML ========>>>>>>>>>>>>>
======================================>>>>>>>>>>> Jump to HTML ========>>>>>>>>>>>>>
Step 49

For the second fieldset, you want the input and label text to appear on the same line.
Start, by giving the input elements in the second fieldset a class of inline.

======================================>>>>>>>>>>> Jump to HTML ========>>>>>>>>>>>>>
======================================>>>>>>>>>>> Jump to HTML ========>>>>>>>>>>>>>
======================================>>>>>>>>>>> Jump to HTML ========>>>>>>>>>>>>>



<<<<<<==========Jump from HTML====================================================
<<<<<<==========Jump from HTML====================================================
<<<<<<==========Jump from HTML====================================================

Step 50
Select only the .inline elements, and give them width of unset. This will remove the earlier rule which set all the input elements to width: 100%.


<<<<<<==========Jump from HTML====================================================
<<<<<<==========Jump from HTML====================================================
<<<<<<==========Jump from HTML====================================================

due how styles are applied, the [.inline] class override the element [fieldset] style

******************
*id>class>element*
******************

.inline {
  width:unset;
}

Step 51Passed
Add some space between the .inline elements and the label text, by giving a right margin of 0.5em. Also, set all the other margin to 0.

Margin - Shorthand Property
To shorten the code, it is possible to specify all the margin properties in one property.

The margin property is a shorthand property for the following individual margin properties:

margin-top
margin-right
margin-bottom
margin-left

====>

.inline {
  width: unset;
  margin: 0 0.5em 0 0;

}

Step 52
If you look close enough, you will notice the .inline elements are too high on the line.

To combat this, set the vertical-align property to middle.


Step 53
To make the input and textarea elements blend in with the background theme, set their background-color to #0a0a23. Then, give them a 1px, solid border with a color of #0a0a23.

input, textarea {
  background-color: #0a0a23;
  border: 1px solid #0a0a23;
}


tep 54
Currently, if you type in the input or textarea elements, you will not be able to see the text [due text color]

Also, their height is too small to be easy to use.

Fix this, by setting the color to #ffffff, and setting their min-height to 2em.



Step 56
To style the submit button, you can use an [attribute selector], which selects an element based on the given attribute value. Here is an example:

input[name="password"]
The above selects input elements with a name attribute value of password.

Now, use the attribute selector to style the submit button with a display of block, and a width of 60%.

	----------------------------\/\/\//\/\/\-------------------------
	- 			attribute selector			-
	----------------------------/\/\//\/\/\/-------------------------

https://www.w3schools.com/css/css_attribute_selectors.asp

Style HTML Elements With Specific Attributes
It is possible to style HTML elements that have specific attributes or attribute values.

CSS [attribute] Selector
The [attribute] selector is used to select elements with a specified attribute.

The following example selects all <a> elements with a target attribute:


Example
a[target] {
  background-color: yellow;
}


CSS [attribute="value"] Selector
The [attribute="value"] selector is used to select elements with a specified attribute and value.

The following example selects all <a> elements with a target="_blank" attribute:

Example
a[target="_blank"] {
  background-color: yellow;
}


CSS [attribute~="value"] Selector
The [attribute~="value"] selector is used to select elements with an attribute value containing a specified word.

The following example selects all elements with a title attribute that contains a space-separated list of words, one of which is "flower":

Example
[title~="flower"] {
  border: 5px solid yellow;
}

The example above will match elements with title="flower", title="summer flower", and title="flower new", but not title="my-flower" or title="flowers".


	----------------------------\/\/\//\/\/\-------------------------
	- 			attribute selector			-
	----------------------------/\/\//\/\/\/-------------------------


Step 56
To style the submit button, you can use an [attribute selector], which selects an element based on the given attribute value. Here is an example:

input[name="password"]
The above selects input elements with a name attribute value of password.

Now, use the attribute selector to style the submit button with a display of block, and a width of 60%.


input[type="submit"]{
  display:block;
  width:60%;
}


Step 57
With a display of block the submit button sits flush against the left edge of its parent.

Use the same technique used to center the form to center the submit button. [  margin: 0 auto; ]




input[type="submit"] {
  display: block;
  width: 60%;
  margin: 0 auto;








---------------------------------------
position: absolute;
top: 50%;

para poder centralo realmente toca restar la mitad del alto toal del elemento ejemplo:


.contenedor {
  ...
  position: relative;
	}

.hijo{
  width: 50px;
  height: 50px;
  background-color: red;
  /* centrado vertical */
  position: absolute;
  top: 50%;
  margin-top: -25px;


<--


---------COLORS------------------------------------

There are two main color models: the additive RGB (red, green, blue) model used in electronic devices, and the subtractive CMYK (cyan, magenta, yellow, black) model used in print.


------------------------------------
header {
position: relative;
scale: screen;
display: flex;
background-color: rgb(181, 152, 226);
padding: 10px;
/*border-radius: 5px;*/
width: 100%;
border: 0.5px solid #2b2727ad;
height: 70px;
box-sizing: border-box;



}

.containerLogo {

 position: relative;
 
 left: 1%;
 height: 45px;
 width: 45px;
 display: flex;
 transition: all 300ms;

}

.logoHeader{
    transition: all 800ms;
    position: relative;
    top: 5%;

}

.logoHeader:hover {

 transform:rotate(60deg) scale(1.3);
 -ms-transform:rotate(60deg) scale(1.3); /* IE 9 */ 
 -webkit-transform:rotate(60deg) scale(1.3); /* Opera, Chrome, and Safari */

} 

--------------------------------------
--------------------------------------



















