
------------------------------------//////////--------------------

Html resources

https://developer.mozilla.org/es/docs/Web/HTML/Content_categories



------------------------////-------------------\\\\--------------

Note: tags and elements operator is "=" instead of ":"
Note:Self-closing tags doesn't have the </close> tag

------------------------////-------------------\\\\-------------------


      --------------------------/\/\/\/\/\/\--------------------------

All pages should begin with <!DOCTYPE html>. This special string is known as a declaration and ensures the browser tries to meet industry-wide specifications.

	<!DOCTYPE html>
	<html lang="en">

Languaje is declared in the openning html tag <html lang="en">

You can set browser behavior by adding self-closing meta elements in the head. Here's an example: <meta attribute="value"> Note that meta elements are self-closing.

Tell the browser to parse the markup into multiple languages by creating a meta element as a child of the head element. Set its [charset] attribute to UTF-8.



-------------------------------------////-----------------------------------------


Now you need to link the styles.css file so the styles will be applied again. Nest a self-closing link element in the head element. Give it a rel attribute value stylesheet and an href attribute value of styles.css.


<!DOCTYPE html> 
		[siempre just "html5"]
<html lang="en"> 

		[set the page languaje]


<head> [all config that are not to be "rendered"]

    <meta charset="utf-8" /> 

		[charset to be used -- this one have the puntuation mark]

    <title>Cafe Menu</title> 
		
		[txt that is displayed in the browser tab]


    <link>    [https://www.w3schools.com/tags/tag_link.asp] <selfclosing>

		

		The <link> tag defines the relationship between the current document 		and an external resource.

		The <link> tag is most often used to link to external style sheets 			or to add a favicon to your website.

		The <link> element is an empty element, it contains attributes only.			
	-crossorigin	
		*anonymous use-credentials
			+Specifies how the element handles cross-origin requests

	-href
		*URL
			+Specifies the location of the linked document


				<link rel="value">	

				[rel] atribute Required. Specifies the relationship 					between	the current document and the linked document
	 				ie: 	*icon
						*stylesheet

	more on:https://www.w3schools.com/tags/att_link_rel.asp


</head>

        -------------------------------/////---------------------------

	For the styling of the page to look similar on mobile as it does on a 			desktop or laptop, you need to add a [meta] element with a special content 		attribute.

	<meta name="viewport" content="width=device-width, initial-scale=1.0" />


				

<article></article>

https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article

Itâ€™s looking good. Time to start adding some menu items. Add an empty article element under the Coffee heading. It will contain a flavor and price of each coffee you currently offer.

	The <article> HTML element represents a self-contained composition in a 		document, page, application, or site, which is intended to be independently 		distributable or reusable (e.g., in syndication). Examples include: a forum 		post, a magazine or newspaper article, or a blog entry, a product card, a 		user-submitted comment, an interactive widget or gadget, or any other 		independent item of content.

*----------------------

The <figure> HTML element represents self-contained content, potentially with an optional caption, which is specified using the <figcaption> element. The figure, its caption, and its contents are referenced as a single unit.
*

------------------------------------------------

"Gosth" margins in elements [html structure afects they way elements are rendered]

You could keep trying various percentages for the widths. Instead, use the back space key on your keyboard to move the p element with the class price next to the p element with the class flavor so that they are on the same line in the editor. Make sure there is no space between them.


Inside the footer, add a p element. Then, nest an anchor (a) element in the p that links to https://www.freecodecamp.org and has the text Visit our website.


 	<footer>
        	<p><a href="https://www.freecodecamp.org">Visit our website</a></p>
	</footer>


-----

The <hr> element represents a paragraph-level thematic break, e.g. a scene change in a story, or a transition to another topic within a section of a reference book.

https://www.w3schools.com/tags/tag_hr.asp

You can use an hr element to display a divider between sections of different content.

First, add an hr element between the p element with the class established and the first section element. Note that hr elements are self closing.


Focusing on the menu items and prices, there is a fairly large gap between each line.

Target all the p elements nested in elements with the class named item and set their top and bottom margin to be 5px.


You change properties of a link when the link has actually been visited by using a pseudo-selector that looks like a:visited { propertyName: propertyValue; }.

Change the color of the footer Visit our website link to be grey when a user has visited the link.

You change properties of a link when the mouse hovers over them by using a pseudo-selector that looks like a:hover { propertyName: propertyValue; }.

Change the color of the footer Visit our website link to be brown when a user hovers over it.

You change properties of a link when the link is actually being clicked by using a pseudo-selector that looks like a:active { propertyName: propertyValue; }.

Change the color of the footer Visit our website link to be white when clicked on.



The menu text CAMPER CAFE has a different space from the top than the address's space at the bottom of the menu. This is due to the browser having some default top margin for the h1 element.

Change the top margin of the h1 element to 0 to remove all the top margin.


-----------------------captura imputs con formularios en html-----------------

                   |--------------------forms---------------------|


The <form> tag is used to create an HTML form for user input.

The <form> element can contain one or more of the following form elements:

<input>
<textarea>
<button>
<select>
<option>
<optgroup>
<fieldset>
<label>
<output>




		 |--------<fomr>-----------Attributes------------------|

https://www.w3schools.com/tags/tag_form.asp
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form


Attribute	Value
Description

accept-charset	character_set	
Specifies the character encodings that are to be used for the form submission

action	        URL		
Specifies where to send the form-data when a form is submitted

autocomplete	on/off		
Specifies whether a form should have autocomplete on or off

encty.pe	application/x-www-form-urlencoded multipart/form-data text/plain
Specifies how the form-data should be encoded when submitting it to the server (only for method="post")

method		get/post	
Specifies the HTTP method to use when sending form-data

name		text	
Specifies the name of a form 

novalidate	novalidate	
Specifies that the form should not be validated when submitted

rel -|external help license next nofollow noopener noreferrer opener prev search|-Specifies the relationship between a linked resource and the current document

target -| _blank _self _parent _top|-
Specifies where to display the response that is received after submitting the form

*-*

The <form> tag also supports the Global Attributes in HTML.

Event Attributes
The <form> tag also supports the Event Attributes in HTML.

*-*

Step 11Passed
As suggested by the title, you are creating a form. So, after the p element, insert a form with an action attribute targeting https://register-demo.freecodecamp.org.

[action atribute, tels the browser how to handle the "submit" button]


The method attribute specifies how to send form-data to the URL specified in the action attribute. The form-data can be sent via a GET request as URL parameters (with method="get") or via a POST request as data in the request body (with method="post").

Set the method attribute to send your form data via a POST request.


    <form action='https://register-demo.freecodecamp.org' method="post"></form>

--------------------------------------------/\/\/\/\/\//\/\----------------------------------------
					    fieldset element
--------------------------------------------\/\/\/\/\/\//\/---------------------------------------
The fieldset element is used to group 
related inputs and labels together in a web form. 



	|------------------------------\/\/\/\//\/\/\---------------------------|		
			fieldset elements are block-level elements
			 meaning that they appear on a new line.
	|------------------------------/////\\\\\---------------------------|



/----------------------------------\
\ The legend element acts as a 	   /
/ caption for the content in the   \
\ fieldset element. It gives users /
/ context about what they should   \
\ enter into that part of the form /
/----------------------------------\



	|------------------------------\/\/\/\//\/\/\---------------------------|		
			fieldset elements are block-level elements
			 meaning that they appear on a new line.
	|------------------------------/\/\//\/\/\/\/---------------------------|





As the form will have three distinct sections, add three fieldset elements within the form element.

--------------------------------------------\/\/\/\//\/\/\/--------------------------------------


	<form method="post" action='https://register-demo.freecodecamp.org'>
	  <fieldset>
	  </fieldset>

	  <fieldset>
	  </fieldset>
      	
	  <fieldset>
      	  </fieldset>
	</form>


The first fieldset will hold name, email, and password fields. 

Start by adding four label elements to the first fieldset.


	|-----------------------------------////\\\\----------------------------|
					 <label></label>
	|-----------------------------------////\\\\----------------------------|



****************************************
* with <label> tag there 	       *
* when you select the display text     *
* ie:[Enter Your First Name]           *
* the option [input field] is selected *		
****************************************


Add the following text to the label elements:

Enter Your First Name:
Enter Your Last Name:
Enter Your Email:
Create a New Password:


<form method="post" action='https://register-demo.freecodecamp.org'>
	<fieldset>

	  <label>Enter Your First Name:</label>
          <label>Enter Your Last Name:</label>
          <label>Enter Your Email:</label>
          <label>Create a New Password:</label>

	</fieldset>

	  <fieldset>
	  </fieldset>
      	
	  <fieldset>
      	  </fieldset>
</form>




------------------HTML--------------------------------------------------CSS----------------------
                                                *
						*	|The rem unit stands for root em, 									*	|and is relative to the font size of 									*	|the html element.
Nest an input element within each label.	*
 Be sure to add each input after the 		*	|As label elements are inline by 		label text, and include 			*					a space after the colon.						*	|default, they are all displayed 									*	|side by side on the same line, 									*	|making their text hard to read. To 									*	|make them appear on separate lines, 									*	|add display: block to the label 									*	|element, and add a margin of 0.5rem 									*	|0, to separate them from each 										*	|other.
						*
						*
---------------------------------------------------------------------------------------------------

inputs are void (selfclosing)

   <fieldset>
        <label>Enter Your First Name: <input></label>
        <label>Enter Your Last Name: <input></label>
        <label>Enter Your Email: <input></label>
        <label>Create a New Password: <input></label>
      </fieldset>

Step 18
Following accessibility best practices, link the input elements and the label elements together using the for attribute.

Use first-name, last-name, email, and new-password as values for the respective id attributes.


<fieldset>
  <label for="first-name">Enter Your First Name: <input id="first-name"/>
  </label>

  <label for="last-name">Enter Your Last Name: <input id="last-name"/>
  </label>
        
  <label for="email">Enter Your Email: <input id="email"/></label>
  <label for="new-password">Create a New Password: <input id="new-password" /></label>
      </fieldset>

**********************/\/\/\//\
<label></label> label elements are used to help associate the text [in this case [Indoor] for an input element with the input element itself [in this case the radio button]

	<label>
		<input id="indoor" type="radio" name="indoor-outdoor">Indoor
	</label>
**********************/\/\/\//\


Step 19

Specifying the type attribute of a form element is important for the browser to know what kind of data it should expect. If the type is not specified, the browser will default to text.

ie:   <input type="text" id="first-name">

Give the first two input elements a type attribute of text, the third a type attribute of email, and the fourth a type attribute of password.

The email type only allows emails with a @ and a . in the domain. The password type obscures the input, and warns if the site does not use HTTPS.


At this point, you should be able to submit the form. However, you might notice not much happens.

To make the form more interactive, add the required attribute to the input elements in the first fieldset.

Now, if you try to submit the form without filling in the required fields, you will see an error message.



	|-----------------------------------////\\\\---------------------------------|
		<input> *selfclosing  synt==<input type="submit" id="XXX" required>
	|-----------------------------------////\\\\---------------------------------|

Algunos tipos de input, como text y submit.

https://www.w3schools.com/tags/tag_input.asp
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input


*********************************************************************************
*										*
* The <input> HTML element is used to create interactive controls 		*	
* for web-based forms in order to accept data from the user; 			*
* a wide variety of types of input data and control widgets are available, 	*
* depending on the device and user agent. 					*
* The <input> element is one of the most powerful and complex in all of HTML 	*
* due to the sheer number of combinations of input types and attributes.	*
*										*
*********************************************************************************



La etiqueta <input>, para la entrada de datos del usuario.



con "<input type="submit>" dentro de la etiqueta <from> // se crea un botton "submit" que envia todos los datos dentro del formulario, mediante el metodo y a la direccion [modulo] seleccionado

Crear una etiqueta para el input con la etiqueta <label>.
Conectar un input con su label.
Colocamos un id al input y asociamos ese id al atributo for del label





Label tag is there so when you select the display text [ie Indoor] the option will be selected


Step 20Passed

The first input element with a type of submit is automatically set to submit its nearest parent form element.

To handle the form submission, after the last fieldset element add an input element with the type attribute set to submit and the value attribute set to Submit.


<input type="submit value="Submit">



At this point, you should be able to submit the form. However, you might notice not much happens.

To make the form more interactive, add the required attribute to the input elements in the first fieldset.

Now, if you try to submit the form without filling in the required fields, you will see an error message.



				----------------------------------
----------------------------------Step 22 ------input validation---------------------------
				----------------------------------

Certain type attribute values come with built-in form validation. For example, type="email" requires that the value be a valid email address.

Add custom validation to the password input element, by adding a [minlength] attribute with a value of 8. Doing so prevents inputs of less than 8 characters being submitted.

	**********************************************
	* pattern----HTML <input> pattern Attribute  *
	**********************************************

	https://www.w3schools.com/tags/att_input_pattern.asp

	**************Definition and Usage**************
	*					       *	
	* The pattern attribute specifies a regular    *
	* expression that the <input> element's        *         Syxtax: <input pattern="regexp">
	* value is checked against on form submission. *
	*					       *	
	************************************************

Note: The pattern attribute works with the following input types: text, date, search, url, tel, email, and password.

Tip: Use the global title attribute to describe the pattern to help the user.


Tip: Learn more about regular expressions in our JavaScript tutorial.


********JavaScript Regular Expressions********
*					     *      	
* https://www.w3schools.com/js/js_regexp.asp *
*					     *	
**********************************************


Step 23Passed
With type="password" you can use the pattern attribute to define a regular expression that the password must match to be considered valid.

Add a pattern attribute to the password input element to require the input match: [a-z0-5]{8,}

The above is a regular expression which matches eight or more lowercase letters or the digits 0 to 5. Then, remove the minlength attribute, and try it out.


			---------------------------------------------------------
			/// ***** label e input poseen el display inline. **** \\\
			----------------------------------------------------------



<form method="post" action='https://register-demo.freecodecamp.org'>
  <fieldset>
    <label for="first-name">Enter Your First Name: <input id="first-name" type="text" /></label>
    <label for="last-name">Enter Your Last Name: <input id="last-name" type="text" /></label>
    <label for="email">Enter Your Email: <input id="email" type="email" /></label>
    <label for="new-password">Create a New Password: <input id="new-password" type="password" /></label>
  </fieldset>

  <fieldset></fieldset>

  <fieldset></fieldset>

  <input type="submit" value="Submit">

</form>

			---------------------------------------------------------
			/// ***** label e input poseen el display inline. **** \\\
			----------------------------------------------------------


		|-----------------------------///\\\--------------------------|
		|-----------------------------///\\\--------------------------|

-----------------------------------------////\\\-------------------------------------------------

Let us go to the next part of the registration form. This section will ask for the type of account the user is opening, and will confirm the user has read the terms and conditions.


Users will be allowed to choose either a Personal Account or Business Account.
To do this, within each of the first two label elements, add one input element with type="radio".

				------------------------------------
-----------------------------------input element with type="radio"---------------------------------
				------------------------------------


There's another way to associate an input element's 
text with the element itself. You can nest the text 
within a label element and add a for attribute with 
the same value as the input element's id attribute.


---------------------
within each of the first two label elements, add one input element with type="radio".

 <fieldset>
   <label>
     <input type="radio" />
   </label>
   <label>
     <input type="radio" />
   </label>
   <label></label>
 </fieldset>

Step 26
For the terms and conditions, add an input with a type of checkbox to the third label element. Make this input element required because users should not sign up without reading the terms and conditions.


        <label>
          <input type="checkbox" required>
        </label>

Step 27
Within each corresponding label element, and immediately after the input element, add a space and add the following text:

Personal Account
Business Account
I accept the terms and conditions

 <fieldset>
   <label>
     <input type="radio" /> Personal Account 
   </label>
   <label>
     <input type="radio" /> Business Account 
   </label>
   <label>
     <input type="checkbox" required /> I accept the terms and conditions
   </label>
 </fieldset>


-------------------
Notice that both radio buttons can be selected at the same time. To make it so selecting one radio button automatically deselects the other, both buttons must have a name attribute with the same value.
-------------------




	|-----------------------------------////\\\\---------------------------------|
          name attribute synt==<input type="submit" id="XXX" name="xxx" required>
	|-----------------------------------////\\\\---------------------------------|


You only want one radio input to be selectable at a time. However, the form does not know the radio inputs are related.

To relate the radio inputs, give them the same name attribute with a value of account-type. Now, it is not possible to select both radio inputs at the same time.

***********************************************************
* Label tag is there so when you select the display 	  *
* text [ie bussiness account] the option will be selected *
***********************************************************


the "value" atribute lets you assing a value when selected [taking both [name] and[id] atributes. If [value] is not specified it will return "on" as value when selected. (NOT usefull when you have multiple options [with one common [name]) 


name="account-type"


<fieldset>
   <label>
	<input type="radio" name="account-type" /> Personal Account
   </label>
   <label>
	<input type="radio" name="account-type" /> Business Account
   </label>
   <label>
	<input type="checkbox" required /> I accept the terms and conditions
   </label>
</fieldset>




Step 31
Moving on to the final fieldset. What if you wanted to allow a user to upload a profile picture?

Well, the input type file allows just that. Add a label with the text Upload a profile picture: , and nest an input accepting a file upload.





				------------------------------------
------------------------<input type="file" id="img" name="img" accept="image/*">------------------------
				------------------------------------


<input type="file">

HTML <input> accept Attribute

Definition and Usage
The accept attribute specifies a filter for what file types the user can pick from the file input dialog box.

Note: The accept attribute can only be used with <input type="file">.

Tip: Do not use this attribute as a validation tool. File uploads should be validated on the server.





---------------------------------------/////\\\\\-----------------------------

Add a legend element with the text Is your cat an indoor or outdoor cat? above both of the radio buttons. [this add a "caption like" legend to be displayed above (*but within)the radio buttons 


	<fieldset>
            <legend>Is your cat an indoor or outdoor cat?</legend>
		<label>
			<input id="indoor" type="radio" name="indoor-outdoor" 					value="indoor"> Indoor
		</label>
		
		<label>
			<input id="outdoor" type="radio" name="indoor-outdoor" 					value="outdoor"> Outdoor
		</label>
         </fieldset>

Forms commonly use checkboxes [as an alternative of radial buttons] for questions that may have more than one answer. For example, here's a checkbox with the option of tacos: <input type="checkbox"> tacos.

	<input type="checkbox"> Loving


There's another way to associate an input element's text with the element itself. You can nest the text within a label element and add a for attribute with the same value as the input element's id attribute.

	<input id="loving" type="checkbox"><label for="loving">Loving</label>


Add the [name] attribute with the value personality to the checkbox input element.

While you won't notice this in the browser, doing this makes it easier for a server to process your web form, especially when there are multiple checkboxes.

	<input id="loving" type="checkbox" name="personality"> 
	<label for="loving">Loving</label>

Like radio buttons, form data for selected checkboxes are name / value attribute pairs. While the value attribute is optional, it's best practice to include it with any checkboxes or radio buttons on the page.

Add a value attribute to each checkbox. For convenience, set each checkbox's value attribute to the same value as its id attribute.

*---
In order to make a checkbox checked or radio button selected by default, you need to add the checked attribute to it. There's no need to set a value to the checked attribute. Instead, just add the word checked to the input element, making sure there is space between it and other attributes.










