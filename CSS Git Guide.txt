Maquetado responsive con CSS Grid | Diseño adaptativo (excelente base)

https://www.youtube.com/watch?v=T4t00Hd3qZc

min 7.17 (actual)

elemntos para el menu de opciones

	+ guardar contraseña para que no sea necesario utilizarla cada vez que se 	encripta/desencripta

	+encryptacion en vivo "sin precionar el boton"

	+Darkmode

	+exportar como [txt] otros?

-----------------------------------/////////----------------------------

si hay un nombre errado [class, id] CSS no ejecuta lo que esta debajo (pero tampoco te avisa) lo mismo sucede con comandos errados (por verificar)


Now you need to link the styles.css file so the styles will be applied again. Nest a self-closing link element in the head element. Give it a rel attribute value stylesheet and an href attribute value of styles.css.

Note: Link element is self-closing

Note: porperties operator is ":" instead of "=" thats for setting up the value
[DO NOT USE ":" in the declaration]

ie:     input, textarea, select {
	width:100%;
	margin: 10px 0 0 0;  
}
	

|---------------------DIV element for design layout purposes----------------------|


<div></div> [in the html file]
The div element is used mainly for design layout purposes unlike the other content elements you have used so far. Add a div element inside the body element and then move all the other elements inside the new div.

to make the div not take up the entire width of the page. The CSS width property is perfect for this. Create a new type selector in the style sheet that gives your div element a width of 300px [it also takes % values]


-------------------------------------////////-----------------

|------------------------------A function---------------------|

A function is a piece of code that can take an input and perform a specific action. The CSS rgb function accepts values, or arguments, for red, green, and blue, and produces a color:

rgb(red, green, blue);
Each red, green, and blue value is a number from 0 to 255. 0 means that there's 0% of that color, and is black. 255 means that there's 100% of that color.

In the .one CSS rule, replace the color keyword red with the rgb function. For the rgb function, set the value for red to 255, the value for green to 0, and the value for blue to 0.


-------NOTE----- -------------------------------------------------
please note diferencess between: 				 -
selectors Properties [general] 					 -	
Classes [created] 						 -
Id's [created]							 -
								 -
more about this: https://www.w3schools.com/css/css_selectors.asp -
------------------------------------------------------------------


--------------------------///////----------------------------


Next, you want to center the div horizontally. You can do this by setting its margin-left and margin-right properties to auto. Think of the margin as invisible space around an element. Using these two margin properties, center the div element within the body element.


So far you have been using type selectors to style elements. A class selector is defined by a name with a dot directly in front of it, like this:

	.class-name {
		  	styles
		    }



inside the body type selector. Now add a background-image property and set its value to url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg).

			NOTE: url for bkgimage

	body {
  
 	 background-color: burlywood;
 	 background-image: url(https://cdn.freecodecamp.org/curriculum/css-		 cafe/beans.jpg)
  
		}


The border-left shorthand property lets you to set the left border's width, style, and color at the same time.

if no color, black is selected by default ****
check border style diferent values ****


Here is the syntax:

border-left: width style color;
In the .sleeve CSS rule, replace the border-left-width, border-left-style, and border-left-color properties with the border-left shorthand property. The values for the width, style, and color of the left border should be the same.


.sleeve {
  width: 110px;
  height: 25px;
  background-color: rgba(255, 255, 255, 0.5);
  border-left-width: 10px;
  border-left-style: solid;
  border-left-color: black;
}

with the shorthand:

.sleeve {
  width: 110px;
  height: 25px;
  background-color: rgba(255, 255, 255, 0.5);
  border-left: 10px solid black;  


Step 88
Notice that the edges of the shadow are sharp. This is because there is an optional blurRadius value for the box-shadow property:

defaults to 0 if it isn't included. (all right to left) 

box-shadow: offsetX offsetY blurRadius spreadRadius color;
box-shadow: offsetX offsetY blurRadius color;
box-shadow: offsetX offsetY color;
box-shadow: color;


------------------------------fomr

------------------------ Margin Auto-----[centering elements]-----------------

Your marker would look better if it was centered on the page. An easy way to do that is with the margin shorthand property.

In the last project, you set the margin area of elements separately with properties like margin-top and margin-left. The margin shorthand property makes it easy to set multiple margin areas at the same time.

To center your marker on the page, set its margin property to auto. This sets margin-top, margin-right, margin-bottom, and margin-left all to auto.

While you have three separate marker div elements, they look like one big rectangle. You should add some space between them to make it easier to see each element.

When the shorthand margin property has two values, it sets margin-top and margin-bottom to the first value, and margin-left and margin-right to the second value.

In your .marker CSS rule, set the margin property to 10px [top&bottom] auto [left-right].

---------------
display: inline-flex; reubica el elemento para que se adapte a los cambios de tamaño del contenedor [y lo alinea horizontalmente (uno al lado del otro)

[esta expresion centra al elemento verticalmente, pero centra la parte "superior" el limite superior del elemento

-------------------------------------

The rem unit stands for root em, and is relative to the font size of the html element.

As label elements are inline by default, they are all displayed side by side on the same line, making their text hard to read. To make them appear on separate lines, add display: block to the label element, and add a margin of 0.5rem 0, to separate them from each other.


Step 44

Center the form element, by giving it a margin of 0 auto. Then, fix its size to a maximum width of 500px, and a minimum width of 300px. In between that range, allow it to have a width of 60vw.


form{
margin:0 auto;
max-width:500px;
width:60vw;
min-width:300px;
}

Step 47
The border of the last fieldset element looks a little out of place. You can select the last element of a specific type using the last-of-type CSS pseudo-class, like this:

p:last-of-type { }
That will select the last p element. Create a new selector that targets the last fieldset element and set its border-bottom to none.


fieldset:last-of-type{
  border-bottom:none;
}


Step 48
It would be nicer to have the label text appear above the form elements.

Select all input, textarea, and select elements, and make them take up the full width of their parent elements.

Also, add 10px of margin to the top of the selected elements. Set the other margins to 0.



Step 48
It would be nicer to have the label text appear above the form elements.

Select all input, textarea, and select elements, and make them take up the full width of their parent elements.

Also, add 10px of margin to the top of the selected elements. Set the other margins to 0.


	input, textarea, select {
				width:100%;
				margin: 10px 0 0 0;  
				}


======================================>>>>>>>>>>> Jump to HTML ========>>>>>>>>>>>>>
======================================>>>>>>>>>>> Jump to HTML ========>>>>>>>>>>>>>
======================================>>>>>>>>>>> Jump to HTML ========>>>>>>>>>>>>>
Step 49

For the second fieldset, you want the input and label text to appear on the same line.
Start, by giving the input elements in the second fieldset a class of inline.

======================================>>>>>>>>>>> Jump to HTML ========>>>>>>>>>>>>>
======================================>>>>>>>>>>> Jump to HTML ========>>>>>>>>>>>>>
======================================>>>>>>>>>>> Jump to HTML ========>>>>>>>>>>>>>



<<<<<<==========Jump from HTML====================================================
<<<<<<==========Jump from HTML====================================================
<<<<<<==========Jump from HTML====================================================

Step 50
Select only the .inline elements, and give them width of unset. This will remove the earlier rule which set all the input elements to width: 100%.


<<<<<<==========Jump from HTML====================================================
<<<<<<==========Jump from HTML====================================================
<<<<<<==========Jump from HTML====================================================

due how styles are applied, the [.inline] class override the element [fieldset] style

******************
*id>class>element*
******************

.inline {
  width:unset;
}

Step 51Passed
Add some space between the .inline elements and the label text, by giving a right margin of 0.5em. Also, set all the other margin to 0.

Margin - Shorthand Property
To shorten the code, it is possible to specify all the margin properties in one property.

The margin property is a shorthand property for the following individual margin properties:

margin-top
margin-right
margin-bottom
margin-left

====>

.inline {
  width: unset;
  margin: 0 0.5em 0 0;

}

Step 52
If you look close enough, you will notice the .inline elements are too high on the line.

To combat this, set the vertical-align property to middle.


Step 53
To make the input and textarea elements blend in with the background theme, set their background-color to #0a0a23. Then, give them a 1px, solid border with a color of #0a0a23.

input, textarea {
  background-color: #0a0a23;
  border: 1px solid #0a0a23;
}


tep 54
Currently, if you type in the input or textarea elements, you will not be able to see the text [due text color]

Also, their height is too small to be easy to use.

Fix this, by setting the color to #ffffff, and setting their min-height to 2em.



Step 56
To style the submit button, you can use an [attribute selector], which selects an element based on the given attribute value. Here is an example:

input[name="password"]
The above selects input elements with a name attribute value of password.

Now, use the attribute selector to style the submit button with a display of block, and a width of 60%.

	----------------------------\/\/\//\/\/\-------------------------
	- 			attribute selector			-
	----------------------------/\/\//\/\/\/-------------------------

https://www.w3schools.com/css/css_attribute_selectors.asp

Style HTML Elements With Specific Attributes
It is possible to style HTML elements that have specific attributes or attribute values.

CSS [attribute] Selector
The [attribute] selector is used to select elements with a specified attribute.

The following example selects all <a> elements with a target attribute:


Example
a[target] {
  background-color: yellow;
}


CSS [attribute="value"] Selector
The [attribute="value"] selector is used to select elements with a specified attribute and value.

The following example selects all <a> elements with a target="_blank" attribute:

Example
a[target="_blank"] {
  background-color: yellow;
}


CSS [attribute~="value"] Selector
The [attribute~="value"] selector is used to select elements with an attribute value containing a specified word.

The following example selects all elements with a title attribute that contains a space-separated list of words, one of which is "flower":

Example
[title~="flower"] {
  border: 5px solid yellow;
}

The example above will match elements with title="flower", title="summer flower", and title="flower new", but not title="my-flower" or title="flowers".


	----------------------------\/\/\//\/\/\-------------------------
	- 			attribute selector			-
	----------------------------/\/\//\/\/\/-------------------------


Step 56
To style the submit button, you can use an [attribute selector], which selects an element based on the given attribute value. Here is an example:

input[name="password"]
The above selects input elements with a name attribute value of password.

Now, use the attribute selector to style the submit button with a display of block, and a width of 60%.


input[type="submit"]{
  display:block;
  width:60%;
}


Step 57
With a display of block the submit button sits flush against the left edge of its parent.

Use the same technique used to center the form to center the submit button. [  margin: 0 auto; ]


input[type="submit"] {
  display: block;
  width: 60%;
  margin: 0 auto;


Step 61
Most browsers inject their own default CSS properties and values for different elements. If you look closely, you might be able to notice the file input is smaller than the other text input elements. By default, a padding of 1px 2px is given to input elements you can type in.

Using another attribute selector, style the input with a type of file to be the same padding as the other input elements.


input[type="file"] {
  padding: 1px 2px;
}


-----------------------------------------canvas------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------




<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Rothko Painting</title>
    <link href="./styles.css" rel="stylesheet">
  </head>
  <body>
    <div class="frame">
      <div class="canvas">
        <div class="one"></div>
      </div>
    </div>
  </body>
</html>





CSS--------------

canvas {
  width: 500px;
  height: 600px;
  background-color: #4d0f00;

}

.frame {
  border: 50px solid black;
  width: 500px;
  padding: 50px;
  margin: 20px auto;
}

.one {
  width: 425px;
  height: 150px;
  background-color: #efb762;
  margin: 20px auto;
}

Now .one is centered horizontally, but its top margin is pushing past the canvas and onto the frame's border, shifting the entire canvas down 20 pixels.

Add padding of 1px to the .canvas element to give the .one element something solid to push off of.


canvas {
  width: 500px;
  height: 600px;
  background-color: #4d0f00;
  padding: 1px;

}



Step 22
Adding 1 pixel of padding to the top, bottom, left, and right of the canvas changed its dimensions to 502 pixels x 602 pixels.

Replace the padding property with overflow set to hidden - changing the canvas back to its original dimensions.









********************************************
* please note the syntax for declaring 	   *
* the element/class is the same as in HTML *
********************************************

Step 62
Speaking of padding, the submit button is sitting at the bottom of the form element. Add 2em of padding only to the bottom of the form.







---------------------------------------
position: absolute;
top: 50%;

para poder centralo realmente toca restar la mitad del alto toal del elemento ejemplo:


.contenedor {
  ...
  position: relative;
	}

.hijo{
  width: 50px;
  height: 50px;
  background-color: red;
  /* centrado vertical */
  position: absolute;
  top: 50%;
  margin-top: -25px;


<--


---------COLORS------------------------------------

There are two main color models: the additive RGB (red, green, blue) model used in electronic devices, and the subtractive CMYK (cyan, magenta, yellow, black) model used in print.


------------------------------------
header {
position: relative;
scale: screen;
display: flex;
background-color: rgb(181, 152, 226);
padding: 10px;
/*border-radius: 5px;*/
width: 100%;
border: 0.5px solid #2b2727ad;
height: 70px;
box-sizing: border-box;



}

.containerLogo {

 position: relative;
 
 left: 1%;
 height: 45px;
 width: 45px;
 display: flex;
 transition: all 300ms;

}

.logoHeader{
    transition: all 800ms;
    position: relative;
    top: 5%;

}

.logoHeader:hover {

 transform:rotate(60deg) scale(1.3);
 -ms-transform:rotate(60deg) scale(1.3); /* IE 9 */ 
 -webkit-transform:rotate(60deg) scale(1.3); /* Opera, Chrome, and Safari */

} 

--------------------------------------
--------------------------------------

complete style



body {
  width: 100%;
  height: 100vh;
  margin: 0;
  background-color: #1b1b32;
  color: #f5f6f7;
  font-family: Tahoma;
  font-size: 16px;
}

h1, p {
  margin: 1em auto;
  text-align: center;
}

form {
  width: 60vw;
  max-width: 500px;
  min-width: 300px;
  margin: 0 auto;
  padding-bottom: 2em;
}

fieldset {
  border: none;
  padding: 2rem 0;
  border-bottom: 3px solid #3b3b4f;
}

fieldset:last-of-type {
  border-bottom: none;
}

label {
  display: block;
  margin: 0.5rem 0;
}

input,
textarea,
select {
  margin: 10px 0 0 0;
  width: 100%;
  min-height: 2em;
}

input, textarea {
  background-color: #0a0a23;
  border: 1px solid #0a0a23;
  color: #ffffff;
}

.inline {
  width: unset;
  margin: 0 0.5em 0 0;
  vertical-align: middle;
}

input[type="submit"] {
  display: block;
  width: 60%;
  margin: 1em auto;
  height: 2em;
  font-size: 1.1rem;
  background-color: #3b3b4f;
  border-color: white;
  min-width: 300px;
}

input[type="file"] {
  padding: 1px 2px;
}



-----------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

Step 33
It's helpful to have your margins push in one direction.

In this case, the bottom margin of the .one element pushes .two down 20 pixels.

In the .two selector, use margin shorthand property to set top margin to 0, horizontal margin to auto, and bottom margin to 20px. This will remove its top margin, horizontally center it, and set its bottom margin to 20 pixels.


.canvas {
  width: 500px;
  height: 600px;
  background-color: #4d0f00;
  overflow: hidden;
}

.frame {
  border: 50px solid black;
  width: 500px;
  padding: 50px;
  margin: 20px auto;
}

.one {
  width: 425px;
  height: 150px;
  background-color: #efb762;
  margin: 20px auto;
}

.two {
  width: 475px;
  height: 200px;
  background-color: #8f0401;
  margin: 0 auto 20px;
}

.three {
  width: 91%;
  height: 28%;
  background-color: #b20403;
  margin: auto;
}




Step 33
It's helpful to have your margins push in one direction.

In this case, the bottom margin of the .one element pushes .two down 20 pixels.

In the .two selector, use margin shorthand property to set top margin to 0, horizontal margin to auto, and bottom margin to 20px. This will remove its top margin, horizontally center it, and set its bottom margin to 20 pixels.


		**********************************************
		********** margin: 0 auto 20px; **************
		**********************************************


Use the filter property to blur the painting by 2px in the .canvas element. (this will apply to all its nested elements and itself)

********************************************
********************************************
** Example of a rule that add a 3px blur: **
**				       	  **
** p {filter: blur(3px);}		  **
********************************************
********************************************

.canvas {
  width: 500px;
  height: 600px;
  background-color: #4d0f00;
  overflow: hidden;
  filter: blur(2px);
}

box-shadow


Step 35
Create a rule that targets both .one and .two and increase their blur effect by 1 pixel.


.one, .two {`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
  filter:blur(1px);


!!!!!!!!!!!**** these filter effects are additive ******!!!!!!!!!!!


The rectangles are too small and their edges don't have the soft quality of a painting.

Increase the area and soften the edges of .one by setting its box-shadow to 0 0 3px 3px #efb762. (same color as bkg)


Step 40

The corners of each rectangle are still too sharp.

Round each corner of the .one element by 9 pixels, using the border-radius property.


Step 41
Use the border-radius property on the .two selector, to set its top-left radius and bottom-right radius to 8px, and top-right radius and bottom-left radius to 10px.


border-radius:8px 10px;
alt
border-radius:8px 10px 8px 10px;

Step 42
The border-radius property accepts up to four values to round the top-left, top-right, bottom-right, and bottom-left corners.

Round the top-left corner of .three by 30 pixels, the top-right by 25 pixels, the bottom-right by 60 pixels, and bottom-left by 12 pixels.


border-radius:30px 25px 60px 12px;


Step 43
Rotate each rectangle to give them more of an imperfect, hand-painted look.

Use the transform property on the .one selector to rotate it counter clockwise by 0.6 degrees.

  transform:rotate(-0.6deg);

note that parentesis hould be right next to the "rotate" text


-----------------------------CSS FLEXBOX PHOTO GALLERY----------------------------
-----------------------------CSS FLEXBOX PHOTO GALLERY----------------------------
-----------------------------CSS FLEXBOX PHOTO GALLERY----------------------------


Step 2
Within your head element, add a meta tag with the name set to viewport and the content set to width=device-width, initial-scale=1.

Also add a meta tag with the charset set to UTF-8.

<!DOCTYPE html>
<html lang="en">
  <head>
    
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <meta charset="utf-8">
    
  </head>
  <body>
  </body>
</html>

Step 7
Normalize your box model by creating a * selector and setting the box-sizing property to border-box as the value.


CSS Selector Reference

https://www.w3schools.com/cssref/css_selectors.php


*{
  box-sizing:border-box;
}


---------------------------------------CSS flex Property------------------------------
---------------------------------------CSS flex Property------------------------------
---------------------------------------CSS flex Property------------------------------
---------------------------------------CSS flex Property------------------------------

https://www.w3schools.com/cssref/css3_pr_flex.php

Step 11
Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container.

To use it, give an element a display property of flex. This will make the element a flex container. Any direct children of a flex container are called flex items.

Create a .gallery selector and make it a flex container.

.gallery{
  display:flex;
}

----------------------------------------------------------------
HTML (updated)

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Photo Gallery</title>
    <link rel="stylesheet" href="./styles.css">
  </head>
  <body>
    <header class="header">
      <h1>css flexbox photo gallery</h1>
    </header>
    <div class="gallery">
      <img src="https://cdn.freecodecamp.org/curriculum/css-photo-gallery/1.jpg">
      <img src="https://cdn.freecodecamp.org/curriculum/css-photo-gallery/2.jpg">
      <img src="https://cdn.freecodecamp.org/curriculum/css-photo-gallery/3.jpg">
      <img src="https://cdn.freecodecamp.org/curriculum/css-photo-gallery/4.jpg">
      <img src="https://cdn.freecodecamp.org/curriculum/css-photo-gallery/5.jpg">
      <img src="https://cdn.freecodecamp.org/curriculum/css-photo-gallery/6.jpg">
      <img src="https://cdn.freecodecamp.org/curriculum/css-photo-gallery/7.jpg">
      <img src="https://cdn.freecodecamp.org/curriculum/css-photo-gallery/8.jpg">
      <img src="https://cdn.freecodecamp.org/curriculum/css-photo-gallery/9.jpg">
    </div>
  </body>
</html>

----------------------------------------------------------------


Step 12
Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:

row (default): horizontal axis with flex items from left to right
row-reverse: horizontal axis with flex items from right to left
column: vertical axis with flex items from top to bottom
column-reverse: vertical axis with flex items from bottom to top
Note: The axes and directions will be different depending on the text direction. The values shown are for a left-to-right text direction.

Try the different values to see how they affect the layout.

When you are done, set an explicit flex-direction of row on the .gallery element.


Step 13
The flex-wrap property determines how your flex items behave when the flex container is too small. Setting it to wrap will allow the items to wrap to the next row or column. nowrap (default) will prevent your items from wrapping and shrink them if needed.

Make it so your flex items wrap to the next row when they run out of space.

Step 14
The justify-content property determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them.

Give your .gallery selector a justify-content property with center as the value.


.gallery {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content:center;
}

Step 15
The align-items property positions the flex content along the cross axis. In this case, with your flex-direction set to row, your cross axis would be vertical.

To vertically center your images, give your .gallery selector an align-items property with center as the value.


Step 17
Notice how some of your images have become distorted. This is because the images have different aspect ratios. Rather than setting each aspect ratio individually, you can use the object-fit property to determine how images should behave.

Give your .gallery img selector the object-fit property and set it to cover. This will tell the image to fill the img container while maintaining aspect ratio, resulting in cropping to fit.

.gallery img {
  width: 100%;
  max-width: 350px;
  height: 300px;
  object-fit:cover;
}

Step 18
Your images need some space between them.

The gap CSS shorthand property sets the gaps, also knowns as gutters, between rows and columns. The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, grid, and multi-column layout. You apply the property to the container element.

Give your .gallery flex container a gap property with 16px as the value.



Step 20
The ::after pseudo-element creates an element that is the last child of the selected element. You can use it to add an empty element after the last image. If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout. Right now, it is in the center because you set justify-content: center on the flex container.

Example:

.container::after {
  content: "";
  width: 860px;
}
Create a new selector using an ::after pseudo-element on the .gallery element. Add a content property set to an empty string "" and 350px set for the width property.

.gallery::after{
  content:"";
  width:350px;
  }


---------------------------------------nutrional fatcs------------------

HTML
-----------------

Within your head element, add a link element with the rel attribute set to stylesheet and the href attribute set to https://fonts.googleapis.com/css?family=Open+Sans:400,700,800.

This will import the Open Sans font family, with the font weight values 400, 700, and 800.

Also add a link element to link your styles.css file.

-----------------------------
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>Nutrition Label</title>

</head>

<body>
  <h1>Nutrition Facts</h1>
  <p>8 servings per container</p>
  <p>Serving size 2/3 cup (55g)</p>
</body>
</html>
--------------------
CSS
--------------------

Step 5
Create a body selector and give it a font-family set to Open Sans with a fallback of sans-serif.

Remember that fonts with spaces in the name must be wrapped in quotes for CSS.

body{
  font-family:Open Sans, sans-serif;
}

Step 10
Give your .label selector a margin property set to 20px auto, and a padding property set to 0 7px.

Note that "padding" also uses the structure of shorthand method (it is NOT 0.7 its 0 7)

.label {
  border: 2px solid black;
  width: 270px;
  margin:20px auto;
  padding:0 7px;
}

Step 11
If you inspect your .label element with your browser's developer tools, you may notice that it's actually 288 pixels wide instead of 270. This is because, by default, the browser includes the border and padding when determining an element's size.

To solve this, reset the box model by creating a * selector and giving it a box-sizing property of border-box.

*{
  box-sizing: border-box;
}

[this helps reducing artifacts when positioning]


Step 12
Remember that the use of h1, h2, and similar tags determine the semantic structure of your HTML. However, you can adjust the CSS of these elements to control the visual flow and hierarchy.

Create an h1 rule and set the font-weight property to 800. This will make your h1 text bolder.


Step 18
The letter-spacing property can be used to adjust the space between each character of text in an element.

Give your h1 selector a letter-spacing property set to 0.15px to space them out a bit more.


Step 22
Horizontal spacing between equally important elements can increase the readability of your text.

Wrap the text 2/3 cup (55g) in a span element.


Step 23
Now we can add the horizontal spacing using flex. In your p selector, add a display property set to flex and a justify-content property set to space-between.

<body>
  <div class="label">
    <h1 class="bold">Nutrition Facts</h1>
    <div class="divider"></div>
    <p>8 servings per container</p>
    <p class="bold">Serving size <span>2/3 cup (55g)</span></p>
  </div>
</body>

Step 31
The rem unit stands for root em, and is relative to the font size of the html element.

Create a .small-text selector and set the font-size to 0.85rem, which would calculate to roughly 13.6px (remember that you set your html to have a font-size of 16px).

---------------------------------------------
---------------------------------------------


  <head>
    <meta charset="UTF-8" />
    <link rel="stylesheet" href="styles.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1">



  <body>
    <header>
    </header>
    <main>
    </main>
    
  </body>


Step 4Passed
Another important meta element for accessibility and SEO is the description definition. The value of the content attribute is used by search engines to provide a description of your page.

Add a meta element with the name attribute set to description, and give it a useful content attribute.


Step 5Passed
Lastly in the head, the title element is useful for screen readers to understand the content of a page. Furthermore, it is an important part of SEO.

Give your page a title that is descriptive and concise.


Navigation is a core part of accessibility, and screen readers rely on you to provide the structure of your page. This is accomplished with semantic HTML elements.

Add a header and a main element to your page.

The header element will be used to introduce the page, as well as provide a navigation menu.

The main element will contain the core content of your page.

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="freeCodeCamp Accessibility Quiz practice project" />
    <title>Accessibility Quiz</title>
    <link rel="stylesheet" href="styles.css" />
  </head>
  <body>


Step 8
A useful property of an SVG (scalable vector graphics) is that it contains a path attribute which allows the image to be scaled without affecting the resolution of the resultant image.

Currently, the img is assuming its default size, which is too large. Correctly, scale the image using it's id as a selector, and setting the width to max(100px, 18vw).

it seems this for SVG


Step 9
As described in the freeCodeCamp Style Guide, the logo should retain an aspect ratio of 35 / 4, and have padding around the text.

First, change the background-color to #0a0a23 so you can see the logo. Then, use the aspect-ratio property to set the desired aspect ratio to 35 / 4. Finally, add a padding of 0.4rem all around.

#logo {
  width: max(100px, 18vw);
  background-color:#0a0a23;
  aspect-ratio:35/4;
  padding:0.4rem;

}

Text Color
The color property is used to set the color of the text. The color is specified by:

a color name - like "red"
a HEX value - like "#ff0000"
an RGB value - like "rgb(255,0,0)"
Look at CSS Color Values for a complete list of possible color values.

The default text color for a page is defined in the body selector.


Step 13
Target unordered list elements within nav elements, and use Flexbox to evenly space the children.

nav > ul {
  display:flex;
  justify-content:space-evenly;
  
}